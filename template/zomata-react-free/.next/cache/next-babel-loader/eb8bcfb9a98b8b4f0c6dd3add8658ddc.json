{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport MailchimpSubscribe from \"react-mailchimp-subscribe\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nvar url = \"https://bangladevs.us16.list-manage.com/subscribe/post?u=a31c01f1ea7e047420474b3c5&amp;id=2729646c8f\"; //custom form\n\nvar CustomForm = function CustomForm(_ref) {\n  var status = _ref.status,\n      message = _ref.message,\n      onValidated = _ref.onValidated;\n  var email;\n\n  var submit = function submit() {\n    return email && email.value.indexOf(\"@\") > -1 && onValidated({\n      EMAIL: email.value\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"form-wrap\"\n  }, status === \"sending\" && __jsx(\"div\", {\n    style: {\n      color: \"blue\"\n    }\n  }, \"sending...\"), status === \"error\" && __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), status === \"success\" && __jsx(\"div\", {\n    style: {\n      color: \"green\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), __jsx(\"input\", {\n    ref: function ref(node) {\n      return email = node;\n    },\n    type: \"email\",\n    placeholder: \"Enter your emaill\"\n  }), __jsx(\"button\", {\n    className: \"btn\",\n    onClick: submit\n  }, \"Subscribe\"));\n}; // use the render prop and your custom form\n\n\n_c = CustomForm;\n\nvar CustomSubscribeForm = function CustomSubscribeForm() {\n  return __jsx(MailchimpSubscribe, {\n    url: url,\n    render: function render(_ref2) {\n      var subscribe = _ref2.subscribe,\n          status = _ref2.status,\n          message = _ref2.message;\n      return __jsx(\"div\", {\n        className: \"subscribes-form\"\n      }, __jsx(CustomForm, {\n        onSubmitted: function onSubmitted(formData) {\n          return subscribe(formData);\n        }\n      }), status === \"sending\" && __jsx(\"div\", {\n        style: {\n          color: \"blue\"\n        }\n      }, \"sending...\"), status === \"error\" && __jsx(\"div\", {\n        style: {\n          color: \"red\"\n        },\n        dangerouslySetInnerHTML: {\n          __html: message\n        }\n      }), status === \"success\" && __jsx(\"div\", {\n        style: {\n          color: \"green\"\n        }\n      }, \"Subscribed !\"));\n    }\n  });\n};\n\n_c2 = CustomSubscribeForm;\nexport default CustomSubscribeForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomForm\");\n$RefreshReg$(_c2, \"CustomSubscribeForm\");","map":{"version":3,"sources":["/Users/akbarramadhan/development/saoherbal/template/zomata-react-free/src/components/Elements/Subscribe/CustomSubscribeForm.js"],"names":["MailchimpSubscribe","FontAwesomeIcon","url","CustomForm","status","message","onValidated","email","submit","value","indexOf","EMAIL","color","__html","node","CustomSubscribeForm","subscribe","formData"],"mappings":";;AAAA,OAAOA,kBAAP,MAA+B,2BAA/B;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AAEA,IAAMC,GAAG,GAAG,sGAAZ,C,CAEA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAoC;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,MAA1BC,OAA0B,QAA1BA,OAA0B;AAAA,MAAjBC,WAAiB,QAAjBA,WAAiB;AACtD,MAAIC,KAAJ;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,WACdD,KAAK,IACLA,KAAK,CAACE,KAAN,CAAYC,OAAZ,CAAoB,GAApB,IAA2B,CAAC,CAD5B,IAEAJ,WAAW,CAAC;AACXK,MAAAA,KAAK,EAAEJ,KAAK,CAACE;AADF,KAAD,CAHG;AAAA,GAAf;;AAOA,SACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACEL,MAAM,KAAK,SAAX,IAAwB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR;AAAZ,kBAD1B,EAEER,MAAM,KAAK,OAAX,IAAuB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAA4B,IAAA,uBAAuB,EAAE;AAACC,MAAAA,MAAM,EAAER;AAAT;AAArD,IAFzB,EAGED,MAAM,KAAK,SAAX,IAAyB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAA8B,IAAA,uBAAuB,EAAE;AAACC,MAAAA,MAAM,EAAER;AAAT;AAAvD,IAH3B,EAIC;AAAO,IAAA,GAAG,EAAE,aAAAS,IAAI;AAAA,aAAKP,KAAK,GAAGO,IAAb;AAAA,KAAhB;AAAoC,IAAA,IAAI,EAAC,OAAzC;AAAiD,IAAA,WAAW,EAAC;AAA7D,IAJD,EAKC;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAEN;AAAjC,iBALD,CADD;AASA,CAlBD,C,CAoBA;;;KApBML,U;;AAqBN,IAAMY,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAC3B,MAAC,kBAAD;AACC,IAAA,GAAG,EAAEb,GADN;AAEC,IAAA,MAAM,EAAE;AAAA,UAAEc,SAAF,SAAEA,SAAF;AAAA,UAAaZ,MAAb,SAAaA,MAAb;AAAA,UAAqBC,OAArB,SAAqBA,OAArB;AAAA,aACP;AAAK,QAAA,SAAS,EAAC;AAAf,SACC,MAAC,UAAD;AAAY,QAAA,WAAW,EAAE,qBAAAY,QAAQ;AAAA,iBAAID,SAAS,CAACC,QAAD,CAAb;AAAA;AAAjC,QADD,EAEEb,MAAM,KAAK,SAAX,IAAwB;AAAK,QAAA,KAAK,EAAE;AAACQ,UAAAA,KAAK,EAAE;AAAR;AAAZ,sBAF1B,EAGER,MAAM,KAAK,OAAX,IAAsB;AAAK,QAAA,KAAK,EAAE;AAACQ,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAA4B,QAAA,uBAAuB,EAAE;AAACC,UAAAA,MAAM,EAAER;AAAT;AAArD,QAHxB,EAIED,MAAM,KAAK,SAAX,IAAwB;AAAK,QAAA,KAAK,EAAE;AAACQ,UAAAA,KAAK,EAAE;AAAR;AAAZ,wBAJ1B,CADO;AAAA;AAFT,IAD2B;AAAA,CAA5B;;MAAMG,mB;AAcN,eAAeA,mBAAf","sourcesContent":["import MailchimpSubscribe from \"react-mailchimp-subscribe\"\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nconst url = \"https://bangladevs.us16.list-manage.com/subscribe/post?u=a31c01f1ea7e047420474b3c5&amp;id=2729646c8f\";\n\n//custom form\nconst CustomForm = ({status, message, onValidated}) => {\n\tlet email;\n\tconst submit = () =>\n\t\temail &&\n\t\temail.value.indexOf(\"@\") > -1 &&\n\t\tonValidated({\n\t\t\tEMAIL: email.value,\n\t\t});\n\n\treturn (\n\t\t<div className=\"form-wrap\">\n\t\t\t{status === \"sending\" && <div style={{color: \"blue\"}}>sending...</div>}\n\t\t\t{status === \"error\" && (<div style={{color: \"red\"}} dangerouslySetInnerHTML={{__html: message}}/>)}\n\t\t\t{status === \"success\" && (<div style={{color: \"green\"}} dangerouslySetInnerHTML={{__html: message}}/>)}\n\t\t\t<input ref={node => (email = node)} type=\"email\" placeholder=\"Enter your emaill\"/>\n\t\t\t<button className=\"btn\" onClick={submit}>Subscribe</button>\n\t\t</div>\n\t);\n};\n\n// use the render prop and your custom form\nconst CustomSubscribeForm = () => (\n\t<MailchimpSubscribe\n\t\turl={url}\n\t\trender={({subscribe, status, message}) => (\n\t\t\t<div className=\"subscribes-form\">\n\t\t\t\t<CustomForm onSubmitted={formData => subscribe(formData)}/>\n\t\t\t\t{status === \"sending\" && <div style={{color: \"blue\"}}>sending...</div>}\n\t\t\t\t{status === \"error\" && <div style={{color: \"red\"}} dangerouslySetInnerHTML={{__html: message}}/>}\n\t\t\t\t{status === \"success\" && <div style={{color: \"green\"}}>Subscribed !</div>}\n\t\t\t</div>\n\t\t)}\n\t/>\n)\n\nexport default CustomSubscribeForm;"]},"metadata":{},"sourceType":"module"}