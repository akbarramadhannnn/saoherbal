{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport MailchimpSubscribe from \"react-mailchimp-subscribe\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst url = \"https://bangladevs.us16.list-manage.com/subscribe/post?u=a31c01f1ea7e047420474b3c5&amp;id=2729646c8f\"; //custom form\n\nconst CustomForm = ({\n  status,\n  message,\n  onValidated\n}) => {\n  let email;\n\n  const submit = () => email && email.value.indexOf(\"@\") > -1 && onValidated({\n    EMAIL: email.value\n  });\n\n  return __jsx(\"div\", {\n    className: \"form-wrap\"\n  }, status === \"sending\" && __jsx(\"div\", {\n    style: {\n      color: \"blue\"\n    }\n  }, \"sending...\"), status === \"error\" && __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), status === \"success\" && __jsx(\"div\", {\n    style: {\n      color: \"green\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), __jsx(\"input\", {\n    ref: node => email = node,\n    type: \"email\",\n    placeholder: \"Enter your emaill\"\n  }), __jsx(\"button\", {\n    className: \"btn\",\n    onClick: submit\n  }, \"Subscribe\"));\n}; // use the render prop and your custom form\n\n\nconst CustomSubscribeForm = () => __jsx(MailchimpSubscribe, {\n  url: url,\n  render: ({\n    subscribe,\n    status,\n    message\n  }) => __jsx(\"div\", {\n    className: \"subscribes-form\"\n  }, __jsx(CustomForm, {\n    onSubmitted: formData => subscribe(formData)\n  }), status === \"sending\" && __jsx(\"div\", {\n    style: {\n      color: \"blue\"\n    }\n  }, \"sending...\"), status === \"error\" && __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), status === \"success\" && __jsx(\"div\", {\n    style: {\n      color: \"green\"\n    }\n  }, \"Subscribed !\"))\n});\n\nexport default CustomSubscribeForm;","map":{"version":3,"sources":["/Users/akbarramadhan/development/saoherbal/template/zomata-react-free/src/components/Elements/Subscribe/CustomSubscribeForm.js"],"names":["MailchimpSubscribe","FontAwesomeIcon","url","CustomForm","status","message","onValidated","email","submit","value","indexOf","EMAIL","color","__html","node","CustomSubscribeForm","subscribe","formData"],"mappings":";;AAAA,OAAOA,kBAAP,MAA+B,2BAA/B;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AAEA,MAAMC,GAAG,GAAG,sGAAZ,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAAoC;AACtD,MAAIC,KAAJ;;AACA,QAAMC,MAAM,GAAG,MACdD,KAAK,IACLA,KAAK,CAACE,KAAN,CAAYC,OAAZ,CAAoB,GAApB,IAA2B,CAAC,CAD5B,IAEAJ,WAAW,CAAC;AACXK,IAAAA,KAAK,EAAEJ,KAAK,CAACE;AADF,GAAD,CAHZ;;AAOA,SACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACEL,MAAM,KAAK,SAAX,IAAwB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR;AAAZ,kBAD1B,EAEER,MAAM,KAAK,OAAX,IAAuB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAA4B,IAAA,uBAAuB,EAAE;AAACC,MAAAA,MAAM,EAAER;AAAT;AAArD,IAFzB,EAGED,MAAM,KAAK,SAAX,IAAyB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAA8B,IAAA,uBAAuB,EAAE;AAACC,MAAAA,MAAM,EAAER;AAAT;AAAvD,IAH3B,EAIC;AAAO,IAAA,GAAG,EAAES,IAAI,IAAKP,KAAK,GAAGO,IAA7B;AAAoC,IAAA,IAAI,EAAC,OAAzC;AAAiD,IAAA,WAAW,EAAC;AAA7D,IAJD,EAKC;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAEN;AAAjC,iBALD,CADD;AASA,CAlBD,C,CAoBA;;;AACA,MAAMO,mBAAmB,GAAG,MAC3B,MAAC,kBAAD;AACC,EAAA,GAAG,EAAEb,GADN;AAEC,EAAA,MAAM,EAAE,CAAC;AAACc,IAAAA,SAAD;AAAYZ,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAD,KACP;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,MAAC,UAAD;AAAY,IAAA,WAAW,EAAEY,QAAQ,IAAID,SAAS,CAACC,QAAD;AAA9C,IADD,EAEEb,MAAM,KAAK,SAAX,IAAwB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR;AAAZ,kBAF1B,EAGER,MAAM,KAAK,OAAX,IAAsB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAA4B,IAAA,uBAAuB,EAAE;AAACC,MAAAA,MAAM,EAAER;AAAT;AAArD,IAHxB,EAIED,MAAM,KAAK,SAAX,IAAwB;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR;AAAZ,oBAJ1B;AAHF,EADD;;AAcA,eAAeG,mBAAf","sourcesContent":["import MailchimpSubscribe from \"react-mailchimp-subscribe\"\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nconst url = \"https://bangladevs.us16.list-manage.com/subscribe/post?u=a31c01f1ea7e047420474b3c5&amp;id=2729646c8f\";\n\n//custom form\nconst CustomForm = ({status, message, onValidated}) => {\n\tlet email;\n\tconst submit = () =>\n\t\temail &&\n\t\temail.value.indexOf(\"@\") > -1 &&\n\t\tonValidated({\n\t\t\tEMAIL: email.value,\n\t\t});\n\n\treturn (\n\t\t<div className=\"form-wrap\">\n\t\t\t{status === \"sending\" && <div style={{color: \"blue\"}}>sending...</div>}\n\t\t\t{status === \"error\" && (<div style={{color: \"red\"}} dangerouslySetInnerHTML={{__html: message}}/>)}\n\t\t\t{status === \"success\" && (<div style={{color: \"green\"}} dangerouslySetInnerHTML={{__html: message}}/>)}\n\t\t\t<input ref={node => (email = node)} type=\"email\" placeholder=\"Enter your emaill\"/>\n\t\t\t<button className=\"btn\" onClick={submit}>Subscribe</button>\n\t\t</div>\n\t);\n};\n\n// use the render prop and your custom form\nconst CustomSubscribeForm = () => (\n\t<MailchimpSubscribe\n\t\turl={url}\n\t\trender={({subscribe, status, message}) => (\n\t\t\t<div className=\"subscribes-form\">\n\t\t\t\t<CustomForm onSubmitted={formData => subscribe(formData)}/>\n\t\t\t\t{status === \"sending\" && <div style={{color: \"blue\"}}>sending...</div>}\n\t\t\t\t{status === \"error\" && <div style={{color: \"red\"}} dangerouslySetInnerHTML={{__html: message}}/>}\n\t\t\t\t{status === \"success\" && <div style={{color: \"green\"}}>Subscribed !</div>}\n\t\t\t</div>\n\t\t)}\n\t/>\n)\n\nexport default CustomSubscribeForm;"]},"metadata":{},"sourceType":"module"}